import { ref } from 'vue';
import { router } from '@inertiajs/vue3';

export function useTasks() {
  // State for the modal
  const isTaskModalVisible = ref(false);
  const selectedEventForTasks = ref(null);
  const taskAssignments = ref([]);
  const filteredEmployees = ref([]);

  // Method to open the modal and prepare data
  const openTaskModal = (event, allCommittees, allEmployees) => {
    selectedEventForTasks.value = event;

    // Deep copy and normalize tasks to avoid modifying original data until save
    const committeesMap = allCommittees.reduce((map, committee) => {
      map[committee.id] = committee;
      return map;
    }, {});

    const employeesMap = allEmployees.reduce((map, employee) => {
      map[employee.id] = employee;
      return map;
    }, {});

    taskAssignments.value = (event.tasks || []).map(task => ({
      ...task,
      committee: task.committee ? committeesMap[task.committee.id] || task.committee : null,
      employees: (task.employees || []).map(emp => employeesMap[emp.id] || emp)
    }));

    // Pre-populate filtered employees for each task
    filteredEmployees.value = taskAssignments.value.map(task =>
      task.committee ? allEmployees.filter(emp => Number(emp.committeeId) === Number(task.committee.id)) : []
    );

    isTaskModalVisible.value = true;
  };

  // Modal Actions
  const addTask = () => {
    taskAssignments.value.push({ committee: null, employees: [], task: '' });
    filteredEmployees.value.push([]);
  };

  const deleteTask = (index) => {
    taskAssignments.value.splice(index, 1);
    filteredEmployees.value.splice(index, 1);
  };

  const updateEmployeesForTask = (index, allEmployees) => {
    const selectedCommittee = taskAssignments.value[index].committee;
    filteredEmployees.value[index] = selectedCommittee
      ? allEmployees.filter(emp => Number(emp.committeeId) === Number(selectedCommittee?.id))
      : [];
    // Reset employees when committee changes
    taskAssignments.value[index].employees = [];
  };

  // Save logic
  const saveTaskAssignments = (onSuccessCallback) => {
    if (!selectedEventForTasks.value) return Promise.reject('No event selected');

    const payload = {
      tasks: taskAssignments.value.map(task => ({
        committee_id: task.committee ? task.committee.id : null,
        employees: (task.employees || []).map(emp => emp.id),
        description: task.task || ''
      })),
    };

    return new Promise((resolve, reject) => {
      router.put(route('tasks.updateForEvent', { id: selectedEventForTasks.value.id }), payload, {
        preserveScroll: true,
        only: ['event', 'errors', 'flash'], // Explicitly request the updated event object
        onSuccess: (page) => {
          isTaskModalVisible.value = false;
          if (typeof onSuccessCallback === 'function') {
            onSuccessCallback(page);
          }
          resolve(page);
        },
        onError: (errors) => reject(errors)
      });
    });
  };

  return { isTaskModalVisible, selectedEventForTasks, taskAssignments, filteredEmployees, openTaskModal, addTask, deleteTask, updateEmployeesForTask, saveTaskAssignments };
}
